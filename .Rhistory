####################################################################
# Populate the outcome DF
source('versus2.R')
for (i in 1:length(factor_list)){
for (j in 1:length(factor_list)){
if (i==j) next                        #Skip cases where factor will be against itself
a <- rownames(df)[i]
b <- colnames(df)[j]
df[i,j] <- versus2(x,a,b)
}
}
# Now count the 'wins'
master <- as.data.frame(df[upper.tri(as.matrix(df))])       #the upper triangle of the 'versus' matrix
colnames(master) <- 'V1'
counts <- ddply(master, .(V1), summarise, V2 = length(V1))  #Count number of times each factor appears on the list
counts <- counts[order(counts[,'V2'],decreasing = TRUE),]   #Order decreasing
top <- as.data.frame(counts$V1[c(1:10)])                     #Best (5) factors
keeper_list[[k]] <- top
}
toc()
keeper_list
winners <- do.call(rbind, keeper_list)
winners
colnames(winners) <-'V1'
q <- ddply(winners, .(V1), summarise, V2 = length(V1))        #How many times did each factor in the keeper list show up in top 5?
q <- q[order(q[,'V2'], decreasing=TRUE),]
winners <- as.data.frame(winners[!duplicated(winners),])
winners
q
winners[!winners$V2 == 1]
str(winners)
winners[!winners == 1]
winners
q[!q$V2==1]
q[!q$V2 == 1]
q[!q$V2 = 1]
q[q$V2 == 1]
q[q == 1]
q[!q == 1]
q
q[,2]
q[!q[,2]==1]
q[q$V2 != 1]
q
str(q)
q = as.data.frame(q)
q[q$V2 != 1]
colnames(q)
q[q$V2]
q
q[q$V2==1]
q$V2==1]
q$V2==1
q[q$V2==1]
q[!q$V2==1]
sum(q$V2==1)
q[-c(1,length(q$V1)-19),]
# Trying to rebuild the bin_comparison script to work more intuitively
library(plyr)
library(tictoc)
tic()
##load your data:
setwd('~/aProjects/FactorTesting/bins/')
frames <- list()
filenames <- list.files()
keeper_list <- list() #initialize the keeper list  #This should be removed to make it more efficient
for (i in 1:length(filenames)){
frames[[i]] <- read.csv(filenames[i])
}
# Possible improvements: Load in any group of csv's and name them accordingly....use list.files(pattern='*.csv')
# Now create your rankings for each file, one at a time:
setwd('~/aProjects/FactorTesting/')
for (k in 1:length(frames)){
#Importing the data:
x <- as.data.frame(frames[[k]], stringsAsFactors = FALSE)
rownames(x) <- x[,1]
factor_list <- x[,1]
x <- x[,c(3,4,5,6)]
colnames(x) <- c('IC','IC.tstat','IC.sd','F1.excess')
x
#Need to purge values that would not have been available for that time period
bad_row <- grep('#N/', x[,1], fixed = TRUE)
if (length(bad_row)>0){
x <- x[-bad_row,]                       #Update dataframe
factor_list <- factor_list[-bad_row]    #Update factor list
}
x
#Create an empty DF for the outcomes
df <- as.data.frame(matrix(nrow=length(factor_list), ncol=length(factor_list)))
rownames(df) <- factor_list
colnames(df) <- factor_list
####################################################################
# Populate the outcome DF
source('versus2.R')
for (i in 1:length(factor_list)){
for (j in 1:length(factor_list)){
if (i==j) next                        #Skip cases where factor will be against itself
a <- rownames(df)[i]
b <- colnames(df)[j]
df[i,j] <- versus2(x,a,b)
}
}
# Now count the 'wins'
master <- as.data.frame(df[upper.tri(as.matrix(df))])       #the upper triangle of the 'versus' matrix
colnames(master) <- 'V1'
counts <- ddply(master, .(V1), summarise, V2 = length(V1))  #Count number of times each factor appears on the list
counts <- counts[order(counts[,'V2'],decreasing = TRUE),]   #Order decreasing
top <- as.data.frame(counts$V1[c(1:10)])                     #Best (5) factors
keeper_list[[k]] <- top
}
winners <- do.call(rbind, keeper_list)
colnames(winners) <-'V1'
q <- ddply(winners, .(V1), summarise, V2 = length(V1))        #How many times did each factor in the keeper list show up in top 5?
q <- as.data.frame(q[order(q[,'V2'], decreasing=TRUE),])
winners <- as.data.frame(winners[!duplicated(winners),])
toc()
q$V2
q[!q$V2==1]
q$V1
class(q)
class(q$V2)
class(q$V1)
q$V1<- as.character(q$V1)
q
q[q$V2==1]
q[,'V2']==1
q[!q$V2==1,]
factor_list_new <- q[!q$V2==1,]         #all factors that make into the top 5 more than once
factor_list_new <- q[!q$V2==1,]$V1         #all factors that make into the top 5 more than once
factor_list_new
factor_list_new <- q[!q$V2==1,]$V1         #all factors that make into the top 5 more than once
factor_list_new
frames[[1]]
temp <- frames[[i]]
temp <- frames[[1]]
str(temp)
temp <- temp[temp[,1] %in% factor_list_new,]
temp
for (i in 1:length(frames)){
temp <- frames[[1]]
temp <- temp[temp[,1] %in% factor_list_new,]
frames[[i]] <- temp
}
frames[[1]]
frames[[2]]
frames[[3]]
for (i in 1:length(frames)){
temp <- frames[[i]]
temp <- temp[temp[,1] %in% factor_list_new,]
frames[[i]] <- temp
}
frames[[1]]
frames[[2]]
frames[[1]]
frames[[2]]
frames[[2]]
frames[[1]]
frames[[2]]
frames[[2]]
for (i in 1:length(frames)){
temp <- frames[[i]]
temp <- temp[temp[,1] %in% factor_list_new,]
frames[[i]] <- temp
}
frames[[1]]
frames[[2]]
frames[[3]]
frames[[4]]
# Trying to rebuild the bin_comparison script to work more intuitively
library(plyr)
library(tictoc)
tic()
##load your data:
setwd('~/aProjects/FactorTesting/bins/')
frames <- list()
filenames <- list.files()
keeper_list <- list() #initialize the keeper list  #This should be removed to make it more efficient
for (i in 1:length(filenames)){
frames[[i]] <- read.csv(filenames[i])
}
# Possible improvements: Load in any group of csv's and name them accordingly....use list.files(pattern='*.csv')
# Now create your rankings for each file, one at a time:
setwd('~/aProjects/FactorTesting/')
for (k in 1:length(frames)){
#Importing the data:
x <- as.data.frame(frames[[k]], stringsAsFactors = FALSE)
rownames(x) <- x[,1]
factor_list <- x[,1]
x <- x[,c(3,4,5,6)]
colnames(x) <- c('IC','IC.tstat','IC.sd','F1.excess')
x
#Need to purge values that would not have been available for that time period
bad_row <- grep('#N/', x[,1], fixed = TRUE)
if (length(bad_row)>0){
x <- x[-bad_row,]                       #Update dataframe
factor_list <- factor_list[-bad_row]    #Update factor list
}
x
#Create an empty DF for the outcomes
df <- as.data.frame(matrix(nrow=length(factor_list), ncol=length(factor_list)))
rownames(df) <- factor_list
colnames(df) <- factor_list
####################################################################
# Populate the outcome DF
source('versus2.R')
for (i in 1:length(factor_list)){
for (j in 1:length(factor_list)){
if (i==j) next                        #Skip cases where factor will be against itself
a <- rownames(df)[i]
b <- colnames(df)[j]
df[i,j] <- versus2(x,a,b)
}
}
# Now count the 'wins'
master <- as.data.frame(df[upper.tri(as.matrix(df))])       #the upper triangle of the 'versus' matrix
colnames(master) <- 'V1'
counts <- ddply(master, .(V1), summarise, V2 = length(V1))  #Count number of times each factor appears on the list
counts <- counts[order(counts[,'V2'],decreasing = TRUE),]   #Order decreasing
top <- as.data.frame(counts$V1[c(1:10)])                     #Best (5) factors
keeper_list[[k]] <- top
}
winners <- do.call(rbind, keeper_list)
colnames(winners) <-'V1'
q <- ddply(winners, .(V1), summarise, V2 = length(V1))        #How many times did each factor in the keeper list show up in top 5?
q <- as.data.frame(q[order(q[,'V2'], decreasing=TRUE),])
winners <- as.data.frame(winners[!duplicated(winners),])
toc()
frames
for (i in 1:length(frames)){
temp <- frames[[i]]
temp <- temp[temp[,1] %in% factor_list_new,]
frames[[i]] <- temp
}
frames
for (k in 1:length(frames)){
#Importing the data:
x <- as.data.frame(frames[[k]], stringsAsFactors = FALSE)
rownames(x) <- x[,1]
factor_list <- x[,1]
x <- x[,c(3,4,5,6)]
colnames(x) <- c('IC','IC.tstat','IC.sd','F1.excess')
x
#Need to purge values that would not have been available for that time period
bad_row <- grep('#N/', x[,1], fixed = TRUE)
if (length(bad_row)>0){
x <- x[-bad_row,]                       #Update dataframe
factor_list <- factor_list[-bad_row]    #Update factor list
}
x
#Create an empty DF for the outcomes
df <- as.data.frame(matrix(nrow=length(factor_list), ncol=length(factor_list)))
rownames(df) <- factor_list
colnames(df) <- factor_list
####################################################################
# Populate the outcome DF
source('versus2.R')
for (i in 1:length(factor_list)){
for (j in 1:length(factor_list)){
if (i==j) next                        #Skip cases where factor will be against itself
a <- rownames(df)[i]
b <- colnames(df)[j]
df[i,j] <- versus2(x,a,b)
}
}
# Now count the 'wins'
master <- as.data.frame(df[upper.tri(as.matrix(df))])       #the upper triangle of the 'versus' matrix
colnames(master) <- 'V1'
counts <- ddply(master, .(V1), summarise, V2 = length(V1))  #Count number of times each factor appears on the list
counts <- counts[order(counts[,'V2'],decreasing = TRUE),]   #Order decreasing
top <- as.data.frame(counts$V1[c(1:10)])                     #Best (5) factors
keeper_list[[k]] <- top
}
winners <- do.call(rbind, keeper_list)
colnames(winners) <-'V1'
q <- ddply(winners, .(V1), summarise, V2 = length(V1))        #How many times did each factor in the keeper list show up in top 5?
q <- as.data.frame(q[order(q[,'V2'], decreasing=TRUE),])
winners <- as.data.frame(winners[!duplicated(winners),])
toc()
q
winners
q
library(plyr)
library(tictoc)
tic()
##load your data:
setwd('~/aProjects/FactorTesting/doit/')
frames <- list()
filenames <- list.files()
keeper_list <- list() #initialize the keeper list  #This should be removed to make it more efficient
for (i in 1:length(filenames)){
frames[[i]] <- read.csv(filenames[i])
}
# Possible improvements: Load in any group of csv's and name them accordingly....use list.files(pattern='*.csv')
# Now create your rankings for each file, one at a time:
setwd('~/aProjects/FactorTesting/')
for (k in 1:length(frames)){
#Importing the data:
x <- as.data.frame(frames[[k]], stringsAsFactors = FALSE)
rownames(x) <- x[,1]
factor_list <- x[,1]
x <- x[,c(3,4,5,6)]
colnames(x) <- c('IC','IC.tstat','IC.sd','F1.excess')
x
#Need to purge values that would not have been available for that time period
bad_row <- grep('#N/', x[,1], fixed = TRUE)
if (length(bad_row)>0){
x <- x[-bad_row,]                       #Update dataframe
factor_list <- factor_list[-bad_row]    #Update factor list
}
x
#Create an empty DF for the outcomes
df <- as.data.frame(matrix(nrow=length(factor_list), ncol=length(factor_list)))
rownames(df) <- factor_list
colnames(df) <- factor_list
####################################################################
# Populate the outcome DF
source('versus2.R')
for (i in 1:length(factor_list)){
for (j in 1:length(factor_list)){
if (i==j) next                        #Skip cases where factor will be against itself
a <- rownames(df)[i]
b <- colnames(df)[j]
df[i,j] <- versus2(x,a,b)
}
}
# Now count the 'wins'
master <- as.data.frame(df[upper.tri(as.matrix(df))])       #the upper triangle of the 'versus' matrix
colnames(master) <- 'V1'
counts <- ddply(master, .(V1), summarise, V2 = length(V1))  #Count number of times each factor appears on the list
counts <- counts[order(counts[,'V2'],decreasing = TRUE),]   #Order decreasing
top <- as.data.frame(counts$V1[c(1:10)])                     #Best (5) factors
keeper_list[[k]] <- top
}
winners <- do.call(rbind, keeper_list)
colnames(winners) <-'V1'
q <- ddply(winners, .(V1), summarise, V2 = length(V1))        #How many times did each factor in the keeper list show up in top 5?
q <- as.data.frame(q[order(q[,'V2'], decreasing=TRUE),])
winners <- as.data.frame(winners[!duplicated(winners),])
toc()
q
V
factor_list_new <- q[!q$V2==1,]$V1         #all factors that make into the top 5 more than once
for (i in 1:length(frames)){
temp <- frames[[i]]
temp <- temp[temp[,1] %in% factor_list_new,]
frames[[i]] <- temp
}
for (k in 1:length(frames)){
#Importing the data:
x <- as.data.frame(frames[[k]], stringsAsFactors = FALSE)
rownames(x) <- x[,1]
factor_list <- x[,1]
x <- x[,c(3,4,5,6)]
colnames(x) <- c('IC','IC.tstat','IC.sd','F1.excess')
x
#Need to purge values that would not have been available for that time period
bad_row <- grep('#N/', x[,1], fixed = TRUE)
if (length(bad_row)>0){
x <- x[-bad_row,]                       #Update dataframe
factor_list <- factor_list[-bad_row]    #Update factor list
}
x
#Create an empty DF for the outcomes
df <- as.data.frame(matrix(nrow=length(factor_list), ncol=length(factor_list)))
rownames(df) <- factor_list
colnames(df) <- factor_list
####################################################################
# Populate the outcome DF
source('versus2.R')
for (i in 1:length(factor_list)){
for (j in 1:length(factor_list)){
if (i==j) next                        #Skip cases where factor will be against itself
a <- rownames(df)[i]
b <- colnames(df)[j]
df[i,j] <- versus2(x,a,b)
}
}
# Now count the 'wins'
master <- as.data.frame(df[upper.tri(as.matrix(df))])       #the upper triangle of the 'versus' matrix
colnames(master) <- 'V1'
counts <- ddply(master, .(V1), summarise, V2 = length(V1))  #Count number of times each factor appears on the list
counts <- counts[order(counts[,'V2'],decreasing = TRUE),]   #Order decreasing
top <- as.data.frame(counts$V1[c(1:10)])                     #Best (5) factors
keeper_list[[k]] <- top
}
winners <- do.call(rbind, keeper_list)
colnames(winners) <-'V1'
q <- ddply(winners, .(V1), summarise, V2 = length(V1))        #How many times did each factor in the keeper list show up in top 5?
q <- as.data.frame(q[order(q[,'V2'], decreasing=TRUE),])
winners <- as.data.frame(winners[!duplicated(winners),])
toc()
toc()
tic()
toc()
q
winners
counts
# Trying to rebuild the bin_comparison script to work more intuitively
library(plyr)
library(tictoc)
tic()
##load your data:
setwd('~/aProjects/FactorTesting/doit/')
frames <- list()
filenames <- list.files()
keeper_list <- list() #initialize the keeper list  #This should be removed to make it more efficient
for (i in 1:length(filenames)){
frames[[i]] <- read.csv(filenames[i])
}
# Possible improvements: Load in any group of csv's and name them accordingly....use list.files(pattern='*.csv')
# Now create your rankings for each file, one at a time:
setwd('~/aProjects/FactorTesting/')
for (k in 1:length(frames)){
#Importing the data:
x <- as.data.frame(frames[[k]], stringsAsFactors = FALSE)
rownames(x) <- x[,1]
factor_list <- x[,1]
x <- x[,c(3,4,5,6)]
colnames(x) <- c('IC','IC.tstat','IC.sd','F1.excess')
x
#Need to purge values that would not have been available for that time period
bad_row <- grep('#N/', x[,1], fixed = TRUE)
if (length(bad_row)>0){
x <- x[-bad_row,]                       #Update dataframe
factor_list <- factor_list[-bad_row]    #Update factor list
}
x
#Create an empty DF for the outcomes
df <- as.data.frame(matrix(nrow=length(factor_list), ncol=length(factor_list)))
rownames(df) <- factor_list
colnames(df) <- factor_list
####################################################################
# Populate the outcome DF
source('versus2.R')
for (i in 1:length(factor_list)){
for (j in 1:length(factor_list)){
if (i==j) next                        #Skip cases where factor will be against itself
a <- rownames(df)[i]
b <- colnames(df)[j]
df[i,j] <- versus2(x,a,b)
}
}
# Now count the 'wins'
master <- as.data.frame(df[upper.tri(as.matrix(df))])       #the upper triangle of the 'versus' matrix
colnames(master) <- 'V1'
counts <- ddply(master, .(V1), summarise, V2 = length(V1))  #Count number of times each factor appears on the list
counts <- counts[order(counts[,'V2'],decreasing = TRUE),]   #Order decreasing
top <- as.data.frame(counts$V1[c(1:10)])                     #Best (5) factors
keeper_list[[k]] <- top
}
winners <- do.call(rbind, keeper_list)
colnames(winners) <-'V1'
q <- ddply(winners, .(V1), summarise, V2 = length(V1))        #How many times did each factor in the keeper list show up in top 5?
q <- as.data.frame(q[order(q[,'V2'], decreasing=TRUE),])
winners <- as.data.frame(winners[!duplicated(winners),])
toc()
counts
View(df)
winners
keeper_list
factor_list_new <- q[!q$V2==1,]$V1         #all factors that make into the top 5 more than once
for (i in 1:length(frames)){
temp <- frames[[i]]
temp <- temp[temp[,1] %in% factor_list_new,]
frames[[i]] <- temp
}
for (k in 1:length(frames)){
#Importing the data:
x <- as.data.frame(frames[[k]], stringsAsFactors = FALSE)
rownames(x) <- x[,1]
factor_list <- x[,1]
x <- x[,c(3,4,5,6)]
colnames(x) <- c('IC','IC.tstat','IC.sd','F1.excess')
x
#Need to purge values that would not have been available for that time period
bad_row <- grep('#N/', x[,1], fixed = TRUE)
if (length(bad_row)>0){
x <- x[-bad_row,]                       #Update dataframe
factor_list <- factor_list[-bad_row]    #Update factor list
}
x
#Create an empty DF for the outcomes
df <- as.data.frame(matrix(nrow=length(factor_list), ncol=length(factor_list)))
rownames(df) <- factor_list
colnames(df) <- factor_list
####################################################################
# Populate the outcome DF
source('versus2.R')
for (i in 1:length(factor_list)){
for (j in 1:length(factor_list)){
if (i==j) next                        #Skip cases where factor will be against itself
a <- rownames(df)[i]
b <- colnames(df)[j]
df[i,j] <- versus2(x,a,b)
}
}
# Now count the 'wins'
master <- as.data.frame(df[upper.tri(as.matrix(df))])       #the upper triangle of the 'versus' matrix
colnames(master) <- 'V1'
counts <- ddply(master, .(V1), summarise, V2 = length(V1))  #Count number of times each factor appears on the list
counts <- counts[order(counts[,'V2'],decreasing = TRUE),]   #Order decreasing
top <- as.data.frame(counts$V1[c(1:10)])                     #Best (5) factors
keeper_list[[k]] <- top
}
winners <- do.call(rbind, keeper_list)
colnames(winners) <-'V1'
q <- ddply(winners, .(V1), summarise, V2 = length(V1))        #How many times did each factor in the keeper list show up in top 5?
q <- as.data.frame(q[order(q[,'V2'], decreasing=TRUE),])
winners <- as.data.frame(winners[!duplicated(winners),])
winners
counts
q
